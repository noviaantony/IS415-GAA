[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello! I am Novia Antony, an Year 3 Computer Science student majoring in Cyber Physical Systems. I am excited to learn something new and interesting through this course ü§ç"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My IS415-GAA Journey",
    "section": "",
    "text": "Welcome to my IS415 Geospatial Analytics & Applications page!\nYou will find my course work for IS415 published on this website"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "",
    "text": "In this Hands-On Exercise, we will get a brief introduction to Geospatial Analytics with R programming! We will cover the following:\n\nSetting up packages & importing data into R\nGeo-processing with sf\nData wrangling with dplyr\nExploratory Data Analysis (EDA) with ggplot2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-loading-r-packages",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse & sf packages\n\npacman::p_load(tidyverse,sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-a-geospatial-data-in-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-a-geospatial-data-in-shapefile-format",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "Importing a Geospatial data in shapefile format",
    "text": "Importing a Geospatial data in shapefile format\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/noviaantony/Desktop/noviaantony/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nPlotting the Geospatial Data\n\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse & sf packages\n\npacman::p_load(tidyverse,sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#overview",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "",
    "text": "In this Hands-On Exercise, we will get a brief introduction to Geospatial Analytics with R programming! We will cover the following:\n\nSetting up packages & importing data into R\nGeo-processing with sf\nData wrangling with dplyr\nExploratory Data Analysis (EDA) with ggplot2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#setup",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#setup",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "2.0 Setup",
    "text": "2.0 Setup\n\n2.1 Setting Up Your File Directory\nLet‚Äôs get our file directory organized for this project. Here‚Äôs what you need to do:\n\nInside this IS415-GAA folder, create a new folder named Hands-on_Ex. Think of this as the main hub for all our hands-on exercises.\nNow, in the Hands-on_Ex folder, create another folder specifically for this week‚Äôs exercise. I‚Äôve named mine Hands-on_Ex01 ‚Äì it‚Äôs a good way to keep things orderly.\nWithin the Hands-on_Ex01 folder, we‚Äôre going to need a place to store our data. Create a folder called data.\nInside the data folder, make two subfolders: one named geospatial and the other aspatial. As their names suggest, we‚Äôll use these to keep our geospatial and aspatial data files separate and organized. All the data we gather in the next section will go here.\nBy setting up this structure, we‚Äôll keep our project neat and navigable. It‚Äôll make our life a whole lot easier as we dive into the exercises!\n\n\n\n2.2 Data Sources\nFor our hands-on exercise, we‚Äôre going to dive into some geo-spatial analytics, and that means we need data first! Here‚Äôs where you‚Äôll find the stuff we need:\n\nFrom data.gov.sg:\n\nMaster Plan 2014 Subzone Boundary\nPre-Schools Location\n\nFrom LTADataMall:\n\nCycling Path\n\nFrom Inside Airbnb:\n\nLatest version of Singapore Airbnb listing data\n\n\nNow, once you‚Äôve got all these datasets, here‚Äôs what you do next: Download them and gather them into one organized place. Remember our data folder in Hands-on_Ex01? Inside, you‚Äôll see two subfolders named geospatial and aspatial. You‚Äôll want to put the geospatial datasets (like the cycling paths, pre-school locations, and subzone boundaries) into the geospatial folder. The aspatial dataset, like the listings.csv from the Airbnb data, should go into the aspatial folder. This setup will keep things super organized, making it easy for us to navigate and use the data efficiently. Let‚Äôs get to it! üåçüíªüìà\n\n\n2.3 Installation of Packages\nLet‚Äôs dive into some cool R packages we‚Äôre going to use in this exercise:\n\nsf: This one‚Äôs our go-to for dealing with geospatial data. Think of importing, managing, and processing all that map data.\ntidyverse: It‚Äôs like a Swiss Army knife for data science in R. We use it for importing, wrangling, and visualizing data. It‚Äôs not just one package, but a whole family of them! You‚Äôve got readr for reading data, tidyr for tidying it up, dplyr for data manipulation & ggplot2 for creating awesome graphics.\npacman: This is our package manager. It helps us load and manage other packages more smoothly. Think of it as a helpful assistant for your package needs.\n\nRun the R code in the console in order to install tidyverse & sf\n\npacman::p_load(tidyverse,sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data-packages-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data-packages-into-r",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "3.0 Importing Data & Packages into R",
    "text": "3.0 Importing Data & Packages into R\n\nInstalling & Loading R Packages\nIn this section, I will install and load tidyverse & sf packages\n\npacman::p_load(tidyverse,sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data-into-r",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "3.0 Importing Data into R",
    "text": "3.0 Importing Data into R\n\n3.1 Importing Geospatial Data in R with st_read\nWhen working with geospatial analytics, we often deal with shapefiles and other geographic data formats. To bring these files into our R environment, we use a function called st_read from the sf package. Here‚Äôs how it works:\n\n3.11 Opening Shapefiles üåç\n\nThe Basics: Shapefiles store geospatial data like maps of regions, roads, or points of interest. They‚Äôre pretty common in geographic data analysis.\nUsing st_read: This function is our key to unlocking the data in shapefiles. You tell it where the file is and what layer of data you want to read.\n\n\n\n3.12 How We Use It üóÇ\nHere are some examples of st_read in action:\n\nReading Subzone Boundaries:\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/noviaantony/Desktop/noviaantony/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThis line reads in data about subzone boundaries. It looks inside the data/geospatial directory for a layer named ‚ÄúMP14_SUBZONE_WEB_PL‚Äù.\n\n\nLoading Cycling Paths:\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/noviaantony/Desktop/noviaantony/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nHere, we‚Äôre grabbing data on cycling paths from the same directory but a different layer.\n\n\nGetting Pre-School Locations (KML Format):\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/noviaantony/Desktop/noviaantony/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThis time, we‚Äôre loading pre-school locations from a KML file, another type of geospatial data format.\n\n\n\n3.13 What to Expect üìä\nWhen you run st_read, you‚Äôll see an output message in R. This tells you how many features (like points, lines, or shapes) are in the data, what type they are (like polygons or points), and the coordinate system they use. For example, with our subzone data (mpsz), it might say there are 323 features, all polygons, in a certain coordinate system.\n\n\n\n3.2 Importing Aspatial Data in R\nWhen it comes to aspatial data, like our Airbnb listings dataset, there‚Äôs an extra step in the import process. We‚Äôll first pull it into R as a tibble data frame and then convert it into a simple feature data frame, which is super handy for geospatial analysis.\n\n3.21 How to Import Aspatial Data\nSince our Airbnb listings are in a CSV file, we‚Äôll use the read_csv() function from the readr package. It looks like this:\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3457 Columns: 75\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr  (25): listing_url, source, name, neighborhood_overview, picture_url, ho...\ndbl  (36): id, scrape_id, host_id, host_listings_count, host_total_listings_...\nlgl   (9): description, host_is_superhost, host_has_profile_pic, host_identi...\ndate  (5): last_scraped, host_since, calendar_last_scraped, first_review, la...\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(listings) \n\nRows: 3,457\nColumns: 75\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753‚Ä¶\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r‚Ä¶\n$ scrape_id                                    &lt;dbl&gt; 2.023123e+13, 2.023123e+1‚Ä¶\n$ last_scraped                                 &lt;date&gt; 2023-12-27, 2023-12-26, ‚Ä¶\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city ‚Ä¶\n$ name                                         &lt;chr&gt; \"Villa in Singapore ¬∑ ‚òÖ4.‚Ä¶\n$ description                                  &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N‚Ä¶\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o‚Ä¶\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/‚Ä¶\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1‚Ä¶\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u‚Ä¶\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be‚Ä¶\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, ‚Ä¶\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",‚Ä¶\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H‚Ä¶\n$ host_response_time                           &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"wit‚Ä¶\n$ host_response_rate                           &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"100‚Ä¶\n$ host_acceptance_rate                         &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"‚Ä¶\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS‚Ä¶\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/‚Ä¶\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/‚Ä¶\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"‚Ä¶\n$ host_listings_count                          &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 7, 51‚Ä¶\n$ host_total_listings_count                    &lt;dbl&gt; 15, 15, 15, 68, 68, 15, 8‚Ä¶\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['‚Ä¶\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T‚Ä¶\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T‚Ä¶\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa‚Ä¶\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"‚Ä¶\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi‚Ä¶\n$ latitude                                     &lt;dbl&gt; 1.34537, 1.34754, 1.34531‚Ä¶\n$ longitude                                    &lt;dbl&gt; 103.9589, 103.9596, 103.9‚Ä¶\n$ property_type                                &lt;chr&gt; \"Private room in villa\", ‚Ä¶\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private ‚Ä¶\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1‚Ä¶\n$ bathrooms                                    &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N‚Ä¶\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared‚Ä¶\n$ bedrooms                                     &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N‚Ä¶\n$ beds                                         &lt;dbl&gt; 3, 1, 2, 1, 1, 5, 1, 1, 1‚Ä¶\n$ amenities                                    &lt;chr&gt; \"[]\", \"[]\", \"[]\", \"[]\", \"‚Ä¶\n$ price                                        &lt;chr&gt; \"$150.00\", \"$80.00\", \"$80‚Ä¶\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9‚Ä¶\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, ‚Ä¶\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9‚Ä¶\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9‚Ä¶\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1‚Ä¶\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1‚Ä¶\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9‚Ä¶\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1‚Ä¶\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N‚Ä¶\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T‚Ä¶\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 6, 6, 29, 30,‚Ä¶\n$ availability_60                              &lt;dbl&gt; 34, 60, 60, 6, 6, 33, 60,‚Ä¶\n$ availability_90                              &lt;dbl&gt; 55, 90, 90, 6, 6, 54, 90,‚Ä¶\n$ availability_365                             &lt;dbl&gt; 55, 91, 91, 183, 183, 54,‚Ä¶\n$ calendar_last_scraped                        &lt;date&gt; 2023-12-27, 2023-12-26, ‚Ä¶\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1‚Ä¶\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 2‚Ä¶\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0‚Ä¶\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, ‚Ä¶\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, ‚Ä¶\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4‚Ä¶\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4‚Ä¶\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4‚Ä¶\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4‚Ä¶\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4‚Ä¶\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4‚Ä¶\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4‚Ä¶\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03‚Ä¶\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE‚Ä¶\n$ calculated_host_listings_count               &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 7, 51‚Ä¶\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0‚Ä¶\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 6, 51‚Ä¶\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0‚Ä¶\n$ reviews_per_month                            &lt;dbl&gt; 0.13, 0.16, 0.30, 0.15, 0‚Ä¶\n\n\n\n\n3.22 Converting Aspatial Data to Geospatial Data\nNow, let‚Äôs morph our listings data into a format that‚Äôs easier for geospatial analysis. We use the st_as_sf() function from the sf package for this:\n\n listings_sf &lt;- st_as_sf(listings, \n                        coords = c(\"longitude\", \"latitude\"),\n                        crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nWhat does this chunk of code do?\n\nIt takes our listings tibble and converts it into a simple feature data frame.\nWe specify which columns are our coordinates (longitude and latitude).\nWe set the Coordinate Reference System (CRS) to 4326 (that‚Äôs the code for WGS84) and then transform it to 3414 (a common CRS for Singapore).\nAfter running this, you‚Äôll notice:\n\nOur listings_sf now has a new column called geometry.\nlongitude and latitude have been combined into this geometry column, which is perfect for mapping and spatial analysis!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "7.0 Exploratory Data Analysis (EDA)",
    "text": "7.0 Exploratory Data Analysis (EDA)\nIn this EDA section, we‚Äôll explore various ggplot2 functions to create informative and accurate statistical graphs for better data visualization and understanding."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#histograms-for-pre-school-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#histograms-for-pre-school-density",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "4.1 Histograms for Pre-school Density",
    "text": "4.1 Histograms for Pre-school Density\n\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "4.2 Scatterplot ‚Ä¶ ?",
    "text": "4.2 Scatterplot ‚Ä¶ ?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-projection",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "5.0 Plotting & Projection",
    "text": "5.0 Plotting & Projection\n\n5.1 Plotting Our Data\nVisualization is key in geospatial analytics. While raw data frames are informative, they‚Äôre not exactly easy on the eyes. Let‚Äôs bring our data to life with some plotting:\n\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nThis gives us a multi-plot of all attributes. For a focused view on a specific attribute, like planning area names, we use:\n\n\n\n\n\nAnd if we just want to see the map outlines:\n\n\n\n\n\n\n\n5.2 Working with Projections\nProjections are crucial in geospatial analysis, helping us transform data into the appropriate coordinate system for our analysis.\n\n5.2.1 Fixing Missing/Inaccurate Coordinate Systems\nSometimes our data might have missing or incorrect coordinate systems. Here‚Äôs how we handle that:\nFirst, check the current CRS with st_crs():\n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nIf it‚Äôs incorrect, assign the right EPSG code. For example, if mpsz is in SVY21 but with the wrong EPSG code, we fix it:\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow, mpsz3414 has the correct SVY21 / Singapore TM coordinate system.\n\n\n5.2.2 Dealing with Inappropriate Coordinate Systems\nRemember our overview in section 3.0? Our datasets might have different coordinate systems. For instance, if preschool is in WGS84 but needs to be in SVY21 for accurate geoprocessing, we transform it:\n\npreschool3414 &lt;- st_transform(preschool, crs = 3414)\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (25089.46 31299.16 0)\n\n\nPOINT Z (27189.07 32792.54 0)\n\n\nPOINT Z (28844.56 36773.76 0)\n\n\nPOINT Z (24821.92 46303.16 0)\n\n\nPOINT Z (28637.82 35038.49 0)\n\n\nThis changes preschool to the SVY21 projected coordinate system, making it compatible with our other data for analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geoprocessing-with-sf",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geoprocessing-with-sf",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "6.0 Geoprocessing with sf",
    "text": "6.0 Geoprocessing with sf\n\n6.1 Buffering\nBuffering means adding space around a line, like the width of a path plus some extra room.\n\nExample with a 5 Meter Buffer: We add a 5-meter buffer around our cycling paths\n\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)\n\n\nCalculating Buffer Area: Next, we find out how much space these buffers take up\n\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\n\n\n6.2 Point-In-Polygon Count\nPoint in Polygon Count is about figuring out how many points are inside a certain area. For instance, counting how many preschools are in each zone. We use st_intersects, not st_intersection, for this task:\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\n\n6.3 Summary Statistics\nTo get a quick overview of our data, like the number of preschools in each zone, we print summary stats:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\n\n6.4 Show Top Values with top_n\ntop_n helps us display the areas with the most preschools:\n\ntop_n(mpsz3414, 3, `PreSch Count`)\n\nSimple feature collection with 3 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 31880.27 xmax: 42940.57 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      163          4       ALJUNIED    GLSZ04      N    GEYLANG         GL\n2      189          2  TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n3      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 83AFAB768B6B2B66 2014-12-05 33592.58 32970.83\n2    EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39\n3   NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   7100.699    2959368 MULTIPOLYGON (((34449.13 33...           40\n2  10180.624    4339824 MULTIPOLYGON (((42196.76 38...           72\n3   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           54\n\n\n\n\n6.5 Calculating Density with mutate\nFinally, we calculate the preschool density in each subzone:\n\nFirst, we find the area of each subzone.\nThen, we use mutate to create a new field, PreSch Density, by dividing the preschool count by the area.\n\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geoprocessing-with-sf-1",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geoprocessing-with-sf-1",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "7.0 Geoprocessing with sf",
    "text": "7.0 Geoprocessing with sf"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#final-reflections",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#final-reflections",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "8.0 Final Reflections",
    "text": "8.0 Final Reflections\nIt‚Äôs been a rewarding experience, delving into the intricacies of spatial data and understanding how to manipulate and visualize it effectively. The hands-on work with tools like sf and ggplot2 has been particularly enlightening, helping me to see data in a more dimensional and contextual way.It‚Äôs fascinating how transforming data into different projections or creating simple buffers can reveal entirely new perspectives.\nThat‚Äôs a wrap on this week‚Äôs exercise! I‚Äôm excited to dive deeper into geospatial analytics. We‚Äôre only just beginning, and there‚Äôs a ton more out there for us to discover and play around with!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-the-contents-of-our-data-frames",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploring-the-contents-of-our-data-frames",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "4.0 Exploring the Contents of Our Data Frames",
    "text": "4.0 Exploring the Contents of Our Data Frames\nNow that we‚Äôve got our data frames ready, let‚Äôs find out what‚Äôs inside them. We‚Äôll use three easy methods to peek into our data frames and understand their structure and content.\n\n4.1 Quick Peek with st_geometry()\nNeed just a basic overview of your geospatial data? st_geometry() is perfect for that:\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nst_geometry gives us a snapshot of the essential features like the geometry type (e.g., MULTIPOLYGON), dimensions, bounding box, and the coordinate reference system (CRS). It‚Äôs a fast way to get the gist of our geospatial data.\n\n\n4.2 A Deeper Look with glimpse()\nFor more detail, especially about the attributes of our data, glimpse() from the dplyr package comes in handy:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, ‚Ä¶\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, ‚Ä¶\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL‚Ä¶\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",‚Ä¶\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",‚Ä¶\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",‚Ä¶\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",‚Ä¶\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT‚Ä¶\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",‚Ä¶\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",‚Ä¶\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05‚Ä¶\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,‚Ä¶\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,‚Ä¶\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,‚Ä¶\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103‚Ä¶\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (‚Ä¶\n\n\nglimpse() shows us more, like the number of rows and columns and the data type for each field. It‚Äôs great for understanding the structure of our data frame beyond just the geospatial aspects.\nThis function gives us a snapshot of the essential features like the geometry type (e.g., MULTIPOLYGON), dimensions, bounding box, and the coordinate reference system (CRS). It‚Äôs a fast way to get the gist of our geospatial data.\n\n\n4.3 Detailed View with head()\nWhen you want to see actual data entries, head() is your go-to:\n\nhead(mpsz)\n\nSimple feature collection with 6 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 24468.89 ymin: 28369.47 xmax: 32362.39 ymax: 30542.74\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n6        6          7 ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6         BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6 29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n\n\nThis function displays the first few entries of our data frame, giving us a clear picture of what each record looks like, including the values in each field and the geometry data. It‚Äôs like a mini-preview of our dataset."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#eda-histograms-of-pre-school-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#eda-histograms-of-pre-school-density",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "7.1 EDA Histograms of Pre-school Density",
    "text": "7.1 EDA Histograms of Pre-school Density\nWe‚Äôll start with a basic histogram using hist() to examine the distribution of PreSch Density:\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nThough this histogram is informative, it‚Äôs quite basic. For more polished reporting, we‚Äôll customize it using ggplot2:\n\nggplot(data=mpsz3414, aes(x= as.numeric(`PreSch Density`))) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n  labs(title = \"Are pre-schools evenly distributed in Singapore?\",\n       subtitle= \"A significant number of planning sub-zones have only one pre-school, while a few have over 20\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Frequency\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#diy-challenge-creating-a-scatterplot-using-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#diy-challenge-creating-a-scatterplot-using-ggplot2",
    "title": "Hands-on Exercise 1: Geospatial Data Science with R",
    "section": "7.2 DIY Challenge: Creating a Scatterplot using ggplot2",
    "text": "7.2 DIY Challenge: Creating a Scatterplot using ggplot2\nCreate a scatterplot using ggplot2 to show the relationship between Pre-school Density and Count. We‚Äôve already prepared the necessary variables. Use geom_point for the scatterplot and customize the appearance:\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`))) +\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#setup",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#setup",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "2.0 Setup",
    "text": "2.0 Setup\n..explain later\n\n2.1 Setting Up Your File Directory\n..explain later\n\n\n2.2 Data Sources\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 from Department of Statistics, Singapore\n\n\n\n2.3 Installation of Packages\nIn this exercise, we‚Äôre focusing on the following R packages:\n\ntmap: This is our go-to package for crafting thematic maps, including types like choropleths and bubble maps. For a comprehensive analysis, we‚Äôll also revisit packages from our previous lesson:\nsf: A key package for loading, handling, and manipulating geospatial data.\ntidyverse: A collection of packages essential for data import, manipulation, and visualization, among other data science activities.\n\nHere‚Äôs a quick script to ensure we have all these packages ready:\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data-into-r",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "3.0 Importing Data into R",
    "text": "3.0 Importing Data into R\n\n3.1 Importing Geospatial Data\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/noviaantony/Desktop/noviaantony/IS415-GAA/Hands-on_Ex/Hands-on_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n3.2 Importing Attribute Data\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-preparation",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "4.0 Data Preparation",
    "text": "4.0 Data Preparation\n\n4.1 Data Wrangling\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n4.2 Joining the attribute data and geospatial data\n\nhead(popdata2020)\n\n# A tibble: 6 √ó 7\n  PA         SZ                    YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPENDENCY\n  &lt;chr&gt;      &lt;chr&gt;                 &lt;dbl&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Cent‚Ä¶  1440             2610   760  4810      0.843\n2 Ang Mo Kio Cheng San              6640            15460  6050 28150      0.821\n3 Ang Mo Kio Chong Boon             6150            13950  6470 26570      0.905\n4 Ang Mo Kio Kebun Bahru            5540            12090  5120 22750      0.882\n5 Ang Mo Kio Sembawang Hills        2100             3410  1310  6820      1    \n6 Ang Mo Kio Shangri-La             3960             8420  3610 15990      0.899\n\nhead(mpsz)\n\nSimple feature collection with 6 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 24468.89 ymin: 28369.47 xmax: 32362.39 ymax: 30542.74\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n6        6          7 ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6         BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6 29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n\n\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                         by = c(\"SUBZONE_N\" = \"SZ\"))\n\nissues with write step"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#choropleth-maps",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "5.0 Choropleth Maps",
    "text": "5.0 Choropleth Maps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#final-reflections",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#final-reflections",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "6.0 Final Reflections",
    "text": "6.0 Final Reflections\n‚Ä¶reflect later"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "..explain later"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "..explain later"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#choropleth-mapping-geospatial-data-with-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#choropleth-mapping-geospatial-data-with-tmap",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "5.0 Choropleth Mapping Geospatial Data with tmap",
    "text": "5.0 Choropleth Mapping Geospatial Data with tmap\n\n5.1 Thematic Plot with qtm\ntmap_mode(\"plot\") creates a static map while tmap_mode(\"view\") creates an interactive map\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n5.2 Creating a choropleth map by using tmap‚Äôs elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n5.2.1 Drawing a base map\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n5.2.2 Drawing a choropleth map using tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n5.2.3 Drawing a choropleth map using tm_fill only\ntm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n5.2.4 Drawing a choropleth map using tm_fill & tm_borders\nto add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1, col = 'blue')\n\n\n\n\n\n\n\n5.3 Data classification methods with tmap\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n5.3.1 Plotting choropleth maps with built-in classification methods\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\n\n\n5.3.2 Plotting choropleth map with custom break\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n5.4 Colour Scheme\n\n\n5.4.1 ColourBrew Palette\nto change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nreverse the colour shading, add a ‚Äú-‚Äù prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n5.5 Map Layout\n\n\n5.5.1 Map Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n5.5.2 Map Style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n5.5.3 Cartographic Furniture\ntmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n5.6 Drawing Small Multiple Choropleth Maps\nfacet maps are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\n5.6.1 assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n5.6.2 defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n5.6.3 creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n5.7 Mappping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  }
]